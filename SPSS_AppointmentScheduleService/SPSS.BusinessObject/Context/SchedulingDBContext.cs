// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using SPSS.BusinessObject.Models;

namespace SPSS.BusinessObject.Context;

public partial class SchedulingDBContext : DbContext
{
    public SchedulingDBContext()
    {
    }

    public SchedulingDBContext(DbContextOptions<SchedulingDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Appointment> Appointments { get; set; }

    public virtual DbSet<Holiday> Holidays { get; set; }

    public virtual DbSet<Registration> Registrations { get; set; }

    public virtual DbSet<RegistrationWeekday> RegistrationWeekdays { get; set; }

    public virtual DbSet<Report> Reports { get; set; }

    public virtual DbSet<ReportImage> ReportImages { get; set; }

    public virtual DbSet<Room> Rooms { get; set; }

    public virtual DbSet<ScheduleOverride> ScheduleOverrides { get; set; }

    public virtual DbSet<Service> Services { get; set; }

    public virtual DbSet<Slot> Slots { get; set; }

    public virtual DbSet<TreatmentPlan> TreatmentPlans { get; set; }

    public virtual DbSet<TreatmentSession> TreatmentSessions { get; set; }

    public virtual DbSet<WorkSchedule> WorkSchedules { get; set; }

    public virtual DbSet<WorkTemplate> WorkTemplates { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=localhost,1433;Initial Catalog=SchedulingDB;Persist Security Info=True;User ID=sa;Password=123456789;Encrypt=False");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Appointment>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.Schedule).WithMany(p => p.Appointments).OnDelete(DeleteBehavior.SetNull);

            entity.HasOne(d => d.Service).WithMany(p => p.Appointments).OnDelete(DeleteBehavior.SetNull);

            entity.HasOne(d => d.Session).WithMany(p => p.Appointments).OnDelete(DeleteBehavior.SetNull);
        });

        modelBuilder.Entity<Holiday>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(sysutcdatetime())");
        });

        modelBuilder.Entity<Registration>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.Slot).WithMany(p => p.Registrations).OnDelete(DeleteBehavior.SetNull);

            entity.HasOne(d => d.Template).WithMany(p => p.Registrations).OnDelete(DeleteBehavior.SetNull);
        });

        modelBuilder.Entity<RegistrationWeekday>(entity =>
        {
            entity.HasKey(e => new { e.Weekday, e.RegistrationId }).HasName("PK__Registra__DB09FD78EF5A2261");

            entity.HasOne(d => d.Registration).WithMany(p => p.RegistrationWeekdays).HasConstraintName("FK_RegistrationWeekdays_Registrations");
        });

        modelBuilder.Entity<Report>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.Appointment).WithMany(p => p.Reports).OnDelete(DeleteBehavior.SetNull);
        });

        modelBuilder.Entity<ReportImage>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(sysutcdatetime())");
        });

        modelBuilder.Entity<Room>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
        });

        modelBuilder.Entity<ScheduleOverride>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(sysutcdatetime())");
        });

        modelBuilder.Entity<Service>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
        });

        modelBuilder.Entity<Slot>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
        });

        modelBuilder.Entity<TreatmentPlan>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(sysutcdatetime())");
        });

        modelBuilder.Entity<TreatmentSession>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.Plan).WithMany(p => p.TreatmentSessions).HasConstraintName("FK_TreatmentSessions_PlanId");
        });

        modelBuilder.Entity<WorkSchedule>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.Status).HasDefaultValue((byte)1);

            entity.HasOne(d => d.Registration).WithMany(p => p.WorkSchedules).OnDelete(DeleteBehavior.SetNull);

            entity.HasOne(d => d.Room).WithMany(p => p.WorkSchedules).OnDelete(DeleteBehavior.SetNull);
        });

        modelBuilder.Entity<WorkTemplate>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}